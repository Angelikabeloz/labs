}
replace_emotions_efficient(study$emotions)
replace_emoticons <- function(x){
if(x == "happy"){
x = ":)"
} else if(x == "neutral") {
x = ":|"
} else{
x = ":("
}
}
replace_emotions(study$emotions)
replace_emotions <- function(x){
if(x == "happy"){
x = ":)"
} else if(x == "neutral") {
x = ":|"
} else{
x = ":("
}
}
replace_emotions(study$emotions)
# write a function that takes a character element as input
# if happy, then :)
# if sad, then :(
# if neutral, then :|
emoticons <- character(length(x)
# write a function that takes a character element as input
# if happy, then :)
# if sad, then :(
# if neutral, then :|
emoticons <- character(length(x)
# write a function that takes a character element as input
# if happy, then :)
# if sad, then :(
# if neutral, then :|
emoticons <- character(length(x)
# write a function that takes a character element as input
# if happy, then :)
# if sad, then :(
# if neutral, then :|
emoticons <- character(length(x)
# write a function that takes a character element as input
# if happy, then :)
# if sad, then :(
# if neutral, then :|
emoticons <- character(length(x)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
my_list <- list(1, "a", TRUE)
my_list[2]
my_list[[2]]
class(my_list[2])
class(my_list[[2]])
output_median <- vector("double", ncol(df))
for (i in seq_along(df)) {
output_median[[i]] <- median(df[[i]])
}
df
output_median <- vector("double", ncol(df))
for (i in seq_along(df)) {
output_median[[i]] <- median(df[[i]])
}
output_median
zscale <- function(x){
if (is.numeric(x)) {
(x - mean(x, na.rm = T) / sd(x, na.rm = T))
} else {
return("Not a numeric input!")
}
}
zscale(df$a)
map(df, mean, na.rm = TRUE)
map(df, \(x) {
mean(x, na.rm = TRUE) }
)
# repetitive code
mean(df$a)
mean(df$b)
mean(df$c)
mean(df$d)
# equivalent map function
map(.x = df, ~ mean(.x, na.rm =T))
# map function in tidyverse style
df |> map(mean)
# map function in tidyverse style
df |> map(mean, na.rm = TRUE)
# equivalent map function
map(.x = df, ~ mean(.x, na.rm =T))
class(mean_sd[mean])
class(mean_sd[mean])
mean_sd[mean]
mean_sd[1]
mean_sd(df$a)
class(mean_sd(df$a))
class(mean_sd(df$a)[1])
class(mean_sd(df$a)[2])
class(mean_sd(df$a))
mean_sd(df$a)
map_dbl(df, mean, na.rm = TRUE)
class(map_dbl(df, mean, na.rm = TRUE))
try <- map_dbl(df, mean, na.rm = TRUE)
class(try)
is.vector(try)
is.list(try)
mean_sd(df$a)
is.vector(mean_sd(df$a))
is.vector(sd(df$a))
is.vector(mean_sd(df$a))
is.list(mean_sd(df$a))
mean_sd <- function(x) {
list('mean' = mean(x, na.rm=T), 'sd' = sd(x, na.rm=T))
}
is.vector(mean_sd(df$a))
is.list(mean_sd(df$a))
class(mean_sd(df$a))
class(map_dbl(df, mean, na.rm = TRUE))
# map function in tidyverse style
df |> map(mean)
mean_sd <- function(x){
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
}
mean_sd(df)
mean_sd(study)
View(study)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
}
}
mean_sd(study)
mean_sd(study$age)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
}
}
mean_sd(study$age)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
return(mean)
}
}
mean_sd(study$age)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
return(mean)
return(sd)
}
}
mean_sd(study$age)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
return(mean & sd)
}
}
mean_sd(study$age)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
}
}
mean_sd(study$age)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
list("mean" = mean(x, na.rm = TRUE),
"sd" = sd(x, na.rm = TRUE))
}
}
mean_sd(study$age)
mean_sd(study$emotions)
stop(x "is not a numeric value")
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop(x "is not a numeric value")
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop(paste(x, "is not a numeric value"))
} else{
list("mean" = mean(x, na.rm = TRUE),
"sd" = sd(x, na.rm = TRUE))
}
}
mean_sd(study$emotions)
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
list("mean" = mean(x, na.rm = TRUE),
"sd" = sd(x, na.rm = TRUE))
}
}
mean_sd(study$emotions)
# Exercise 6 ####
map_df(study |> select(where(is.numeric)), mean_sd) |>
cbind(
'col' = study |>
select(where(is.numeric)) |>
colnames()
)
map_df(study |> select(where(is.numeric), mean_sd))
map_df(study |> select(where(is.numeric), mean_sd))
mean_sd <- function(x){
if(!(is.numeric(x))) {
stop("x is not a numeric value")
} else{
list("mean" = mean(x, na.rm = TRUE),
"sd" = sd(x, na.rm = TRUE))
}
}
map_df(study |> select(where(is.numeric), mean_sd))
map_df((study |> select(where(is.numeric)), mean_sd))
map_df(study |> select(where(is.numeric), mean_sd)) |>
colnames()
map_df(study |> select(where(is.numeric)), mean_sd)
map_df(study |> select(where(is.numeric)), mean_sd) |>
names
map_df(study |> select(where(is.numeric)), mean_sd) |>
pull(colnames)
map_df(study |> select(where(is.numeric)), mean_sd) |>
"col" = colnames(study)
map_df(study |> select(where(is.numeric)), mean_sd) #|>
map_df(study |> select(where(is.numeric)), mean_sd) |>
cbind(
"col_name" = study |>
select(where(is.numeric))
)
map_df(study |> select(where(is.numeric)), mean_sd) |>
cbind(
"col_name" = study |>
select(where(is.numeric)) |>
colnames()
)
map_df(study |> select(where(is.numeric)), mean_sd) |>
cbind(
"col_name" = colnames(select(where(is.numeric(study))))
)
map_df(study |> select(where(is.numeric)), mean_sd) |>
cbind(
"col_name" = study |>
select(where(is.numeric)) |>
colnames()
)
map_df(study |> where(is.numeric) |> tolower())
map_df(study |> where(is.character) |> tolower())
map_df(study |> where(is.character), tolower)
map_df(study |> select(where(is.character)), tolower)
# Exercise 7 ####
study |> select(where(is.character)) |> map_df(tolower)
map_df(study |> select(where(is.character)), tolower)
map_df(study |> select(where(is.numeric)), mean_sd)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
d = (earth_radius) * c
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = (earth_radius) * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
# make the objects that are otherwise entered as input parameters to your function global
lat1 = 49.5; lon1 = 8.4; lat2 = 52.5; lon2 = 13.4
# now, execute line by line
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
traceback()
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
traceback()
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
traceback()
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
deg2rad <- function(deg) return(deg*pi/180)
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
