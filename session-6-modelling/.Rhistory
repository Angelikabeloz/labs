knitr::opts_chunk$set(echo = TRUE)
options(digits=2,scipen=999)
# save the built-in output hook
hook_output <- knitr::knit_hooks$get("output")
# set a new output hook to truncate text output
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
colorise <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
knitr::include_graphics("pics/data-science-communicate.png")
pacman::p_load(kableExtra, tidyverse, broom, modelsummary, estimatr, janitor, modelr)
life_expec_dat <- read_csv("life_expectancy.csv") %>% clean_names()
head(life_expec_dat)
formula_string <- paste("life_expectancy", "~ gdp")
form <- as.formula(formula_string) # needs to be transformed to correct class
form <- lm(form, data = life_expec_dat)
reg <- lm(life_expectancy ~ gdp, data = life_expec_dat)
form$coefficients == reg$coefficients
# iterate over different y variables.
lm_fun_iter_y <-  function(dep_var) {
lm( as.formula(paste(dep_var, "~ gdp")), data = life_expec_dat)
}
# iterate over different x variables.
lm_fun_iter_x <- function(indep_var) {
lm( as.formula(paste("life_expectancy ~", paste(indep_var, collapse = "+"))), data = life_expec_dat)
}
# create vector of variables to iterate over
vars <- life_expec_dat %>%
select(-c("life_expectancy", "country")) %>%
names()
# run a bivariate model for each column
biv_model_out <-  vars %>%
map(lm_fun_iter_x)
# run a bivariate model for each column
biv_model_out_w_names <-  vars %>%
set_names() %>%
map(lm_fun_iter_x)
# create list of combinations of vars
indep_vars_combos <- modelr::formulas(~life_expectancy,
"Bivariate OLS"  = ~ gdp,
"Multivariate OLS" = ~ gdp + alcohol + bmi + total_expenditure,
"Interaction" = ~ population + gdp * total_expenditure,
"Polynomial" = ~ gdp + I(gdp^2))
multiv_model_out <- indep_vars_combos %>%  map(lm, data = life_expec_dat)
str(multiv_model_out[[3]])
broom::tidy(multiv_model_out[[3]], conf.int = TRUE, conf.level = 0.95)
broom::glance(multiv_model_out[[3]])
augment(multiv_model_out[[3]], se_fit = TRUE) %>% head(3)
multiv_model_out_broom <- map_dfr(multiv_model_out, broom::tidy, .id = "model_type")
multiv_model_out_broom %>% head()
modelsummary(multiv_model_out, output = "kableExtra")
model_table <- modelsummary(multiv_model_out,
output = "kableExtra",
fmt = "%.2f",  # 2-digits and trailing 0
estimate  = "{estimate}",
statistic = "conf.int",
coef_omit = "Intercept")
mod_table <- modelsummary(multiv_model_out,
output = "default",
fmt = "%.2f",  # 2-digits and trailing 0
estimate  = "{estimate}",
statistic = "conf.int",
coef_omit = "Intercept",
coef_rename=c("gdp"="Gdp", "bmi"="Avg. BMI", "alcohol" = "Alcohol Consum.","population"= "Pop.",
"gdp:total_expenditure" = "Gdp * Health Expenditure (total)",
"total_expenditure"="Health Expenditure (total)", "I(gdp^2)" ="GdpÂ²"),
gof_omit = 'DF|Deviance|Log.Lik|AIC|BIC',
title = 'A Most Beautiful Regression Table')
mod_table %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, fixed_thead = T) %>%
row_spec(3, color = 'red') %>%
row_spec(5, background = 'lightblue')
modelplot(multiv_model_out[[2]], coef_omit = 'Interc' )
modelplot(multiv_model_out, coef_omit = 'Interc')
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Or you might use any other Paletter inherent to R
modelplot(multiv_model_out, coef_omit = "Intercept") +
labs(x = 'Coefficients',
y = 'Term names',
title = 'Linear regression models of "Life expectancy"',
caption = "Comparing multiple models, the data originated at the WHO") +
scale_color_manual(values = cbPalette)
life_expec_dat <- read_csv("life_expectancy.csv")
#%>% clean_names()
head(life_expec_dat)
life_expec_dat <- read_csv("life_expectancy.csv") %>% clean_names()
head(life_expec_dat)
life_expec_dat <- read_csv("life_expectancy.csv")
#%>% clean_names()
head(life_expec_dat)
life_expec_dat <- read_csv("life_expectancy.csv") %>% clean_names()
head(life_expec_dat)
formula_string <- paste("life_expectancy", "~ gdp")
formula_string
form <- as.formula(formula_string) # needs to be transformed to correct class
form
lm_fun_iter_x <- function(indep_var) {
print(paste("life_expectancy ~", paste(indep_var, collapse = "+")))
}
# create vector of variables to iterate over
vars <- life_expec_dat %>%
select(-c("life_expectancy", "country")) %>%
names()
# run a bivariate model for each column
biv_model_out <-  vars %>%
map(lm_fun_iter_x)
lm_fun_iter_x <- function(indep_var) {
lm( as.formula(paste("life_expectancy ~", paste(indep_var, collapse = "+"))), data = life_expec_dat)
}
# create vector of variables to iterate over
vars <- life_expec_dat %>%
select(-c("life_expectancy", "country")) %>%
names()
# run a bivariate model for each column
biv_model_out <-  vars %>%
map(lm_fun_iter_x)
biv_model_out
# run a bivariate model for each column
biv_model_out_w_names <-  vars %>%
set_names() %>%
map(lm_fun_iter_x)
biv_model_out_w_names
# run a bivariate model for each column
biv_model_out_w_names <-  vars %>%
set_names() %>%
map(lm_fun_iter_x)
# create list of combinations of vars
indep_vars_combos <- modelr::formulas(~life_expectancy,
"Bivariate OLS"  = ~ gdp,
"Multivariate OLS" = ~ gdp + alcohol + bmi + total_expenditure,
"Interaction" = ~ population + gdp * total_expenditure,
"Polynomial" = ~ gdp + I(gdp^2))
multiv_model_out <- indep_vars_combos %>%  map(lm, data = life_expec_dat)
multiv_model_out
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# save the built-in output hook
hook_output <- knitr::knit_hooks$get("output")
# set a new output hook to truncate text output
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
colorise <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{%s}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'>%s</span>", color,
x)
} else x
}
knitr::include_graphics("pics/data-science-communicate.png")
pacman::p_load(kableExtra, tidyverse, broom, modelsummary, specr, janitor, modelr)
life_expec_dat <- read_csv("life_expectancy.csv") %>%
clean_names() %>%
mutate(developed = if_else(status == "Developed", 1, 0),
large = if_else(population > 50000000, 1, 0))
head(life_expec_dat)
formula_string <- paste("life_expectancy", "~ gdp")
form <- as.formula(formula_string) # needs to be transformed to correct class
form <- lm(form, data = life_expec_dat)
reg <- lm(life_expectancy ~ gdp, data = life_expec_dat)
form$coefficients == reg$coefficients
# function to include different y variables.
lm_fun_iter_y <-  function(dep_var) {
lm( as.formula(paste(dep_var, "~ gdp")), data = life_expec_dat)
}
# function to include different x variables.
lm_fun_iter_x <- function(indep_var) {
lm( as.formula(paste("life_expectancy ~", paste(indep_var, collapse = "+"))), data = life_expec_dat)
}
## check what the function does
#lm_fun_iter_x <- function(indep_var) {
#  print(paste("life_expectancy ~", paste(indep_var, collapse = "+")))
#}
# create vector of variables to iterate over
vars <- life_expec_dat %>%
select(-c("life_expectancy", "country")) %>%
names()
# run a bivariate model for each column
biv_model_out <-  vars %>%
map(lm_fun_iter_x)
# run a bivariate model for each column
biv_model_out_w_names <-  vars %>%
set_names() %>%
map(lm_fun_iter_x)
# create list of combinations of vars
indep_vars_combos <- modelr::formulas(~life_expectancy,
"Bivariate OLS"  = ~ gdp,
"Multivariate OLS" = ~ gdp + total_expenditure + population + alcohol + bmi ,
"Interaction" = ~ population + gdp * total_expenditure,
"Polynomial" = ~ gdp + I(gdp^2))
multiv_model_out <- indep_vars_combos %>%  map(lm, data = life_expec_dat)
setup_specs(
y = c("life_expectancy"),
# We add an additional dependent variable
x = c("gdp", "log(gdp)", "I(gdp^2)", "gdp * total_expenditure"),
# We are not sure which independent variable is better
model = c("lm", "glm"),
# We only use linear model or more complicated one
controls = c("population", "alcohol", "bmi"))
# Run specification curve analysis (under the hood it uses setup_specs())
results <- run_specs(df = life_expec_dat,
y = c("life_expectancy"),               # We add an additional dependent variable
x = c("gdp", "log(gdp)", "I(gdp^2)", "gdp:total_expenditure"),         # We are not sure which independent variable is better
model = c("lm", "glm"),           # We only use linear model or more complicated one
controls = c("population", "alcohol", "bmi"),
subsets = list(developed = unique(na.omit(life_expec_dat$developed))) # so it is 1 or 0, not sure why author of pkg choose to do it this way
)
results %>% head()
plot_decisiontree(results,
legend = TRUE)
summarise_specs(results,
var = c("std.error", "estimate"))
plot_specs(results)
str(multiv_model_out[[3]])
broom::tidy(multiv_model_out[[3]], conf.int = TRUE, conf.level = 0.95)
broom::glance(multiv_model_out[[3]])
augment(multiv_model_out[[3]], se_fit = TRUE) %>% head(3)
multiv_model_out_broom <- map_dfr(multiv_model_out, broom::tidy, .id = "model_type")
multiv_model_out_broom %>% head()
modelsummary(multiv_model_out, output = "kableExtra")
model_table <- modelsummary(multiv_model_out,
output = "kableExtra",
fmt = "%.2f",  # 2-digits and trailing 0
estimate  = "{estimate}",
statistic = "conf.int",
coef_omit = "Intercept")
mod_table <- modelsummary(multiv_model_out,
output = "default",
fmt = "%.2f",  # 2-digits and trailing 0
estimate  = "{estimate}",
statistic = "conf.int",
coef_omit = "Intercept",
coef_rename=c("gdp"="Gdp", "bmi"="Avg. BMI", "alcohol" = "Alcohol Consum.","population"= "Pop.",
"gdp:total_expenditure" = "Gdp * Health Expenditure (total)",
"total_expenditure"="Health Expenditure (total)", "I(gdp^2)" ="GdpÂ²"),
gof_omit = 'DF|Deviance|Log.Lik|AIC|BIC',
title = 'A Most Beautiful Regression Table')
mod_table %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, fixed_thead = T) %>%
row_spec(3, color = 'red') %>%
row_spec(5, background = 'lightblue')
modelplot(multiv_model_out[[2]], coef_omit = 'Interc' )
modelplot(multiv_model_out, coef_omit = 'Interc')
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Or you might use any other Paletter inherent to R
modelplot(multiv_model_out, coef_omit = "Intercept") +
labs(x = 'Coefficients',
y = 'Term names',
title = 'Linear regression models of "Life expectancy"',
caption = "Comparing multiple models, the data originated at the WHO") +
scale_color_manual(values = cbPalette)
knitr::include_graphics("pics/Screenshot 2021-10-15 at 12.05.25.png")
knitr::include_graphics("pics/Screenshot 2021-10-15 at 12.06.47.png")
knitr::include_graphics("pics/Screenshot 2021-10-15 at 12.07.41.png")
knitr::include_graphics("pics/Screenshot 2021-10-15 at 12.09.30.png")
specs <- setup_specs(
y = c("life_expectancy"),
# We add an additional dependent variable
x = c("gdp", "log(gdp)", "I(gdp^2)", "gdp * total_expenditure"),
# We are not sure which independent variable is better
model = c("lm", "glm"),
# We only use linear model or more complicated one
controls = c("population", "alcohol", "bmi"))
results <- run_specs(life_expec_dat, specs)
augment(multiv_model_out[[3]], se_fit = TRUE) #%>% head(3)
augment(multiv_model_out[[3]], se_fit = TRUE) %>% head(3)
