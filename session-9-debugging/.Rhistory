?geom_bar
geom_text(aes(y = 10, label = Representative), hjust = 0, color = "white", size = 2) +
coord_flip() +
theme_minimal()
ggplot(legislator_df_table, aes(y = Mean, x = Rank)) +
xlab("Rank") + ylab("Avg. daily page views") +
labs(title = "Top 10 representatives by average daily page views") +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = -nrow(legislator_df_table):-1, labels = rev(1:nrow(legislator_df_table)))+
geom_text(aes(y = 10, label = Representative), hjust = 0, color = "white", size = 2) +
coord_flip() +
theme_minimal()
ggplot(legislator_df_table, aes(y = Mean, x = -Rank)) +
xlab("Rank") + ylab("Avg. daily page views") +
labs(title = "Top 10 representatives by average daily page views") +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = -nrow(legislator_df_table):-1, labels = rev(1:nrow(legislator_df_table)))+
geom_text(aes(y = 10, label = Representative), hjust = 0, color = "white", size = 2) +
coord_flip() +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
error = FALSE,
message = FALSE,
warning = FALSE,
comment = NA)
library(tidyverse)
library(readr)
library(palmerpenguins)
library(gridExtra)
library(patchwork)
library(grid)
library(showtext)
library(hrbrthemes)
library(viridis)
library(extrafont)
library(RColorBrewer)
library(ggrepel)
# chose the "Drop all the unimportant stuff" principle
#https://clauswilke.com/dataviz/balance-data-context.html
data(package = 'palmerpenguins')
df <- penguins_raw
#theme_set(theme_minimal())
#theme_update(text = element_text(size = 10,
#             family = "Times New Roman"))
p1 <- df %>%
ggplot(aes( x =`Flipper Length (mm)`, y = `Body Mass (g)`, color = `Species`))+
geom_point(alpha = 0.7,
size = 1.5) +
geom_smooth(method = "lm", size = 1, se = F) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
#legend.background = element_blank(),
#legend.key = element_blank(),
legend.position = "none")
p2 <- df %>%
ggplot(aes(x =`Flipper Length (mm)`, y = `Body Mass (g)`, color = `Species`)) +
geom_point() +
theme(panel.border = element_rect(colour = "black", fill=NA),
#legend.background = element_blank(),
#legend.box.background = element_rect(colour = "black"),
plot.background = element_rect(colour = "black", fill=NA),
panel.grid = element_line(colour = "black"),
legend.position = "none")
grid_arrange_shared_legend <-
function(...,
ncol = length(list(...)),
nrow = 1,
position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <-
ggplotGrob(plots[[1]] + theme(legend.position = position, legend.key = element_blank(), legend.box.background = element_blank()))$grobs
legend <- g[[which(sapply(g, function(x)
x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x)
x + theme(legend.position = "none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(
position,
"bottom" = arrangeGrob(
do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)
),
"right" = arrangeGrob(
do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)
)
)
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
final_grid <- grid_arrange_shared_legend(p2, p1)
final_grid <- grid.arrange(final_grid, top = "4. Drop all the unimportant stuff", bottom = "Reduce the amount of non-data ink by managing the \'data-ink ratio\', \n namely the proportion of a graphicâ€™s ink devoted to the non-redundant display of data-information")
ggsave("Rule 4.png", final_grid, width = 8, height = 5)
minimal <- theme_set(theme_minimal())
theme(minimal)
theme_update(text = element_text(size = 10,
family = "Times New Roman"))
theme(minimal)
library(extrafont)
font_import()
fonts()
font_import()
warnings()
loadfonts(device="win")       #Register fonts for Windows bitmap output
fonts()
loadfonts(device="mac")
?loadfonts
loadfonts()
fonts()
?fonts
loadfonts
loadfonts("pdf")
fonts()
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
# GLOBAL OBJECTS
# make the objects that are otherwise entered as input parameters to your function global
lat1 = 49.5;lon1 = 8.4; lat2 = 52.5; lon2 = 13.4
# now, execute line by line
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
# GLOBAL OBJECTS
# make the objects that are otherwise entered as input parameters to your function global
lat1 = 49.5;lon1 = 8.4; lat2 = 52.5; lon2 = 13.4; earth.radius = 6371
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
d = earth.radius * c
return(d)
# TRACEBACK
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
# TRACEBACK
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
traceback()
# BROWSER
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
# BROWSER
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
# BROWSER
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
f1 <- function(x, y) {
log(x)
sqrt(y)
}
f1("x", 100)
## -----------------------------------------------------------------------------------------------------------------
f1 <- function(x, y) {
try(log(x))
try(sqrt(y))
}
f1("x", 100)
## -----------------------------------------------------------------------------------------------------------------
f1 <- function(x, y) {
try(log(x), silent = T)
try(sqrt(y))
}
f1("x", 100)
## ----eval = FALSE-------------------------------------------------------------------------------------------------
elements <-list(1,2,3,"f")
results <- map(elements, log)
results <- map(elements, possibly(log, NA))
results <- map(elements, possibly(log, 0))
results
results <- map(elements, possibly(log, "Could not log this!"))
results
show_condition <- function(code) {
tryCatch(code,
error = function(c) "error",
warning = function(c) "warning",
message = function(c) "message" )
}
show_condition(stop("!"))
show_condition(warning("?!"))
show_condition(message("?"))
show_condition(10+5)
read.csv("code/dummy.csv")
read.csv("code/dummy.csv", "code/dummy2.csv", "code/dummy3.csv")
?tryCatch
read.csv_new <- function(file, ...) {
tryCatch(read.csv(file, ...), error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
stop(c)
})
}
read.csv_new("code/dummy.csv" , "code/dummy2.csv", "code/dummy3.csv")
read.csv_new <- function(file, ...) {
tryCatch(read.csv(file, ...), warning = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
})
}
read.csv_new("code/dummy.csv" , "code/dummy2.csv", "code/dummy3.csv")
# load packages
library(tidyverse)
library(LegislatoR)
install.packages("LegislatoR")
library(legislatoR)
political_df <-
left_join(x = filter(get_political(legislature = "ger"), as.numeric("session") == 18),
y = get_core(legislature = "ger"), by = "pageid")
legislatoR::cld_content()
# get political data on German legislators
political_df <-
left_join(x = filter(get_political(legislature = "deu"), as.numeric("session") == 18),
y = get_core(legislature = "deu"), by = "pageid")
glimpse(political_df)
# get political data on German legislators
core_df <- get_core(legislature = "deu")
political_df <- get_political(legislature = "deu") %>%
filter(as.numeric("session") == 18) %>%
left_join(x = .,
y = ., by = "pageid")
political_df <- get_political(legislature = "deu") %>%
filter(as.numeric(session) == 18) %>%
left_join(x = .,
y = ., by = "pageid")
political_df <- get_political(legislature = "deu")
political_df <- get_political(legislature = "deu") %>%
filter(as.numeric("session") == 18)
political_df <- get_political(legislature = "deu") %>%
filter(as.numeric("session") == 18) %>%
left_join(x = .,
y = ., by = "pageid")
political_df <- get_political(legislature = "deu") %>%
filter(as.numeric(session) == 18) %>%
left_join(x = .,
y = ., by = "pageid")
# wiki traffic data
traffic_df <-
get_traffic(legislature = "ger") %>%
filter(date >= "2013-10-22" & date <= "2017-10-24") %>%
group_by(pageid) %>%
summarize(traffic_mean = mean(traffic, na.rm = TRUE),
traffic_max = max(traffic, na.rm = TRUE))
# wiki traffic data
traffic_df <-
get_traffic(legislature = "deu") %>%
filter(date >= "2013-10-22" & date <= "2017-10-24") %>%
group_by(pageid) %>%
summarize(traffic_mean = mean(traffic, na.rm = TRUE),
traffic_max = max(traffic, na.rm = TRUE))
head(traffic_df)
sessions_served_df <-
get_political(legislature = "deu") %%
group_by(pageid) %>%
dplyr::summarize(sessions_served = n())
glimpse(political_df)
# sessions served
sessions_served_df <-
get_political(legislature = "deu") %>%
group_by(pageid) %>%
dplyr::summarize(sessions_served = n())
glimpse(sessions_served_df)
# merge
legislator_df <-
left_join(political_df, sessions_served_df, by = "pageid") %>%
left_join(traffic_df, by = "pageid")
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
# merge
legislator_df <-
left_join(political_df, sessions_served_df, by = "pageid") %>%
left_join(traffic_df, by = "pageid")
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
glimpse(legislator_df)
political_df <- get_political(legislature = "deu") %>%
filter(as.numeric(session) == 18) %>%
left_join(x = .,
y = core_df, by = "pageid")
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
# get political data on German legislators
core_df <- get_core(legislature = "deu")
political_df <- get_political(legislature = "deu") %>%
filter(as.numeric(session) == 18) %>%
left_join(x = .,
y = core_df, by = "pageid")
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
# merge
legislator_df <-
left_join(political_df, sessions_served_df, by = "pageid") %>%
left_join(traffic_df, by = "pageid")
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
View(legislator_df)
glimpse(legislator_df)
# compute age
get_age <- function(birth, date_at) {
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime( lubridate::ymd(date_at_fmt), lubridate::ymd(birth_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
glimpse(legislator_df)
# compute age
get_age <- function(birth, date_at) {
browser()
date_at_fmt <- date_at
birth_fmt <- birth
diff <- difftime(lubridate::ymd(birth_fmt), lubridate::ymd(date_at_fmt))
diff_years <- time_length(diff, "years")
diff_years
}
legislator_df$age_in_years <- round(get_age(legislator_df$birth, "2017-10-24"), 0)
# plot top 10 pageviews
legislator_df <- arrange(legislator_df, desc(traffic_mean))
legislator_df$rank <- 1:nrow(legislator_df)
legislator_df_table <- dplyr::select(rank, name, traffic_mean, traffic_max)
# plot top 10 pageviews
legislator_df <- arrange(legislator_df, desc(traffic_mean))
legislator_df$rank <- 1:nrow(legislator_df)
legislator_df_table <- dplyr::select(rank, name, traffic_mean, traffic_max)
?rank
legislator_df_table <- dplyr::select( name, traffic_mean, traffic_max)
?ranking
?n_rank
legislator_df$n_rank <- 1:nrow(legislator_df)
legislator_df_table <- dplyr::select(n_rank, name, traffic_mean, traffic_max)
glimpse(legislator_df)
legislator_df_table <- legislator_df  %>%
dplyr::select(n_rank, name, traffic_mean, traffic_max)
glimpse(legislator_df_table)
legislator_df_table <- legislator_df  %>%
dplyr::select(rank, name, traffic_mean, traffic_max)
names(legislator_df_table) <- c("Rank", "Representative", "Mean", "Maximum")
legislator_df_table <- head(legislator_df_table, 10)
ggplot(legislator_df_table, aes(y = Mean, x = -Rank)) +
xlab("Rank") + ylab("Avg. daily page views") +
labs(title = "Top 10 representatives by average daily page views") +
geom_bar(stats = "identity") +
scale_x_continuous(breaks = -nrow(legislator_df_table):-1, labels = rev(1:nrow(legislator_df_table)))
ggplot(legislator_df_table, aes(y = Mean, x = -Rank)) +
xlab("Rank") + ylab("Avg. daily page views") +
labs(title = "Top 10 representatives by average daily page views") +
geom_col(stats = "identity") +
scale_x_continuous(breaks = -nrow(legislator_df_table):-1, labels = rev(1:nrow(legislator_df_table)))
ggplot(legislator_df_table, aes(y = Mean, x = -Rank)) +
xlab("Rank") + ylab("Avg. daily page views") +
labs(title = "Top 10 representatives by average daily page views") +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = -nrow(legislator_df_table):-1, labels = rev(1:nrow(legislator_df_table)))
?stat_count()
ggplot(legislator_df_table, aes(y = Mean, x = -Rank)) +
xlab("Rank") + ylab("Avg. daily page views") +
labs(title = "Top 10 representatives by average daily page views") +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = -nrow(legislator_df_table):-1, labels = rev(1:nrow(legislator_df_table)))
geom_text(aes(y = 10, label = Representative), hjust = 0, color = "white", size = 2) +
coord_flip() +
theme_minimal()
ggplot(legislator_df_table, aes(y = Mean, x = -Rank)) +
xlab("Rank") + ylab("Avg. daily page views") +
labs(title = "Top 10 representatives by average daily page views") +
geom_bar(stat = "identity") +
scale_x_continuous(breaks = -nrow(legislator_df_table):-1, labels = rev(1:nrow(legislator_df_table))) +
geom_text(aes(y = 10, label = Representative), hjust = 0, color = "white", size = 2) +
coord_flip() +
theme_minimal()
